{
    "swagger": "2.0",
    "info": {
        "version": "0.0.1",
        "title": "Situation Handler",
        "description": "This is the Rest Api to configure the Situation Handler. It allows to\n  - View, edit and create endpoints\n  - View, edit and create notification rules and actions\n  - View, add and remove plugins at runtime\n  - View the history of executed actions/operations\n"
    },
    "host": "localhost:8081",
    "basePath": "/config",
    "schemes": [
        "http"
    ],
    "paths": {
        "/endpoints": {
            "get": {
                "summary": "Get all endpoints.",
                "description": "Gets `Endpoint` objects. An Empty list if no endpoints exist.\n",
                "tags": [
                    "endpoint"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "title": "ArrayOfEndpoints",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Endpoint"
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new endpoint.",
                "description": "The endpoint has to contain at least one Handled Situation. Else a 422 error will be returned.",
                "tags": [
                    "endpoint"
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "endpoint",
                        "description": "The endpoint object to be added.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Endpoint created. The `answerCode` is the ID of the newly created endpoint.",
                        "schema": {
                            "$ref": "#/definitions/Answer"
                        }
                    },
                    "422": {
                        "description": "An invalid endpoint url was used or another property was omitted.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            }
        },
        "/endpoints/{endpointId}": {
            "get": {
                "summary": "Get an endpoint with a certain ID.",
                "description": "Gets an `Endpoint` Object.",
                "tags": [
                    "endpoint"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/EndpointPath"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response. Contains the endpoint with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }
                    },
                    "404": {
                        "description": "No endpoint with this id found.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete the endpoint with the specified id.",
                "tags": [
                    "endpoint"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/EndpointPath"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response. The `answerCode` is the ID of the deleted endpoint.",
                        "schema": {
                            "$ref": "#/definitions/Answer"
                        }
                    },
                    "404": {
                        "description": "No endpoint with this id found.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update an endpoint with a certain ID.",
                "description": "Allows to update one or more properties of an endpoint. Only the properties to update have to be provided. When the handled situations are updated, note that it is required to state at least the id of the situation(s) to update. Otherwise the update of the situation is not possible. However, all other attributes are optional.",
                "tags": [
                    "endpoint"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "endpoint",
                        "description": "The updated endpoint. All fields are optional. Only the fields to update are required.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }
                    },
                    {
                        "$ref": "#/parameters/EndpointPath"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response. The `answerCode` is the ID of the updated endpoint.",
                        "schema": {
                            "$ref": "#/definitions/Answer"
                        }
                    },
                    "404": {
                        "description": "There is no endpoint with the given id.",
                        "schema": {
                            "title": "message",
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "An invalid endpoint url was used or another mistake was made.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            }
        },
        "/endpoints/{endpointId}/handledSituations": {
            "get": {
                "summary": "Get all situations of the endpoint.",
                "tags": [
                    "endpoint",
                    "HandledSituation"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/EndpointPath"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get Successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HandledSituation"
                            }
                        }
                    },
                    "404": {
                        "description": "Endpoint not found.",
                        "schema": {
                            "title": "message",
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "summary": "Add a new situation to an endpoint.",
                "tags": [
                    "endpoint",
                    "HandledSituation"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/EndpointPath"
                    },
                    {
                        "in": "body",
                        "name": "situation",
                        "description": "the new situation to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HandledSituation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Situation successfully added. Answer code is the id of the new situation.",
                        "schema": {
                            "$ref": "#/definitions/Answer"
                        }
                    },
                    "404": {
                        "description": "Endpoint not found.",
                        "schema": {
                            "title": "message",
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Invalid situation",
                        "schema": {
                            "title": "error message",
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/endpoints/{endpointId}/handledSituations/{situationId}": {
            "get": {
                "summary": "Get a specific situation.",
                "tags": [
                    "endpoint",
                    "HandledSituation"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/EndpointPath"
                    },
                    {
                        "$ref": "#/parameters/SituationPath"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get successful.",
                        "schema": {
                            "$ref": "#/definitions/HandledSituation"
                        }
                    },
                    "404": {
                        "description": "Situation not found.",
                        "schema": {
                            "title": "message",
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a situation",
                "tags": [
                    "endpoint",
                    "HandledSituation"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/EndpointPath"
                    },
                    {
                        "$ref": "#/parameters/SituationPath"
                    },
                    {
                        "in": "body",
                        "name": "situation",
                        "description": "the updated situation",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HandledSituation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get successful.",
                        "schema": {
                            "$ref": "#/definitions/HandledSituation"
                        }
                    },
                    "404": {
                        "description": "Situation/Endpoint not found.",
                        "schema": {
                            "title": "message",
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Invalid situation",
                        "schema": {
                            "title": "error message",
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete the situation.",
                "tags": [
                    "endpoint",
                    "HandledSituation"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/EndpointPath"
                    },
                    {
                        "$ref": "#/parameters/SituationPath"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get successful.",
                        "schema": {
                            "$ref": "#/definitions/HandledSituation"
                        }
                    },
                    "404": {
                        "description": "Situation not found.",
                        "schema": {
                            "title": "message",
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/rules": {
            "get": {
                "summary": "Get all notification rules.",
                "description": "Gets `Rule` objects. An Empty list if no rules exist.",
                "tags": [
                    "rule"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Operation successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Rule"
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Add a new notification rule.",
                "description": "A new notification rule for the specified situation is added. Note that there can be only one rule per situation. In return, a rule can specifiy several actions to execute in this situation. However, adding a rule for an already existing situation appends the actions of the newly added rule to the existing rule. I.e. this operation can also be used to add several actions to a rule at once. If one of the actions is invalid, it is not added. However, the rule is created and all valid actions are added.",
                "tags": [
                    "rule"
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The rule to add.",
                        "schema": {
                            "$ref": "#/definitions/Rule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "rule successfully added.",
                        "schema": {
                            "$ref": "#/definitions/Answer"
                        }
                    },
                    "422": {
                        "description": "An invalid rule was submitted.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            }
        },
        "/rules/{ruleId}": {
            "get": {
                "summary": "Get the rule with the specified id.",
                "tags": [
                    "rule"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/RulePath"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The rule with this id.",
                        "schema": {
                            "$ref": "#/definitions/Rule"
                        }
                    },
                    "404": {
                        "description": "The rule with this ID was not found.",
                        "schema": {
                            "type": "string",
                            "description": "errror message"
                        }
                    }
                }
            },
            "put": {
                "summary": "Updates the situation of a rule.",
                "tags": [
                    "rule"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/RulePath"
                    },
                    {
                        "in": "body",
                        "name": "situation",
                        "description": "the new situation",
                        "schema": {
                            "$ref": "#/definitions/Situation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update successful.",
                        "schema": {
                            "$ref": "#/definitions/Answer"
                        }
                    },
                    "404": {
                        "description": "The rule with this ID was not found.",
                        "schema": {
                            "type": "string",
                            "description": "errror message"
                        }
                    },
                    "422": {
                        "description": "An invalid rule was submitted.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deltes a rule.",
                "tags": [
                    "rule"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/RulePath"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete operation successful.",
                        "schema": {
                            "$ref": "#/definitions/Answer"
                        }
                    },
                    "404": {
                        "description": "An operation with the specified ID could not be found.",
                        "schema": {
                            "type": "string",
                            "description": "Error message"
                        }
                    }
                }
            }
        },
        "/rules/{ruleId}/actions": {
            "get": {
                "summary": "Get all actions associated with the rule with `ruleId`.",
                "description": "Gets all actions. An empty array if no actions are associated with the rule or the rule with this id does not exist.",
                "tags": [
                    "action"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/RulePath"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation successful.",
                        "schema": {
                            "type": "array",
                            "description": "All actions associated with the rule.",
                            "items": {
                                "$ref": "#/definitions/Action"
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Add a new action to the rule.",
                "tags": [
                    "action"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/RulePath"
                    },
                    {
                        "in": "body",
                        "name": "action",
                        "description": "the new action to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Action"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The action was successfully added to the rule.",
                        "schema": {
                            "$ref": "#/definitions/Answer"
                        }
                    },
                    "404": {
                        "description": "The rule with this id was not found.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    },
                    "422": {
                        "description": "An invalid action was submitted.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            }
        },
        "/rules/{ruleId}/actions/{actionId}": {
            "get": {
                "summary": "Get the action with the specified id (`actionId`) from the specified rule (`ruleId`).",
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "tags": [
                    "action"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/RulePath"
                    },
                    {
                        "$ref": "#/parameters/ActionPath"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation successful.",
                        "schema": {
                            "$ref": "#/definitions/Action"
                        }
                    },
                    "404": {
                        "description": "No action with this id found.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update the action with the specified id (`actionId`) from the specified rule (`ruleId`).",
                "description": "Note that all fields from `Action` are optional. Only specify the fields you want to update.",
                "tags": [
                    "action"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/RulePath"
                    },
                    {
                        "$ref": "#/parameters/ActionPath"
                    },
                    {
                        "in": "body",
                        "name": "action",
                        "description": "the update action. Only updated fields required",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Action"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "update successful",
                        "schema": {
                            "$ref": "#/definitions/Answer"
                        }
                    },
                    "404": {
                        "description": "No action with this id found.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    },
                    "422": {
                        "description": "An invalid rule was submitted.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete the action with the specified id (`actionId`) from the specified rule (`ruleId`).",
                "tags": [
                    "action"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/RulePath"
                    },
                    {
                        "$ref": "#/parameters/ActionPath"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Action successfully deleted.",
                        "schema": {
                            "$ref": "#/definitions/Answer"
                        }
                    },
                    "404": {
                        "description": "No action with this id found.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            }
        },
        "/plugins": {
            "get": {
                "summary": "Get information about all Plugins",
                "tags": [
                    "plugin"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Operation successful.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Plugin"
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Add a new plugin.",
                "description": "Upload a new plugin to the situation handler. The plugin is added at runtime, i.e. it is available for use immediately.",
                "tags": [
                    "plugin"
                ],
                "produces": [
                    "text/plain"
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "x-file-name",
                        "description": "The id of the plugin has to be set in the headers. This HAS to be the same id the plugin reports at runtime.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "description": "A .jar File that contains a valid plugin.",
                        "type": "file",
                        "name": "pluginFile",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plugin successfully added.",
                        "schema": {
                            "type": "string",
                            "description": "success message"
                        }
                    },
                    "422": {
                        "description": "There exists already a plugin with the specified ID.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            }
        },
        "/plugins/{pluginId}": {
            "get": {
                "summary": "Get the plugin with the specified ID.",
                "tags": [
                    "plugin"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/PluginPath"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation successful.",
                        "schema": {
                            "$ref": "#/definitions/Plugin"
                        }
                    },
                    "404": {
                        "description": "No plugin with this ID exists.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete the plugin with the specified ID.",
                "tags": [
                    "plugin"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/PluginPath"
                    },
                    {
                        "name": "delete",
                        "in": "query",
                        "description": "Specifiy whether the actions associated to this plugin should be deleted or not. When an invalid value is used or the param is omitted, no actions will be deleted.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete operation successful.",
                        "schema": {
                            "$ref": "#/definitions/Answer"
                        }
                    },
                    "404": {
                        "description": "No plugin with this ID exists.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            }
        },
        "/history": {
            "get": {
                "summary": "Get the history.",
                "description": "The history stores information about executed actions and the endpoints chosen for workflow operations. You can use the operation to get the whole history or a part of it. To get only an part of the history use the query parameters. The offset is applied backwards. So if there are n entries in the history, the offset is 10 and numberOfEntries is 50, the entries n - 10 to n - 60 will be returned, with n -10 as first element in the list. Entry n represents the newest entry in the history. If both params are 0, the whole history will be returned (not recommended).",
                "tags": [
                    "history"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "offset",
                        "type": "integer",
                        "description": "the offset applied from the end of the history, i.e. the newest entry. Must be a number >= 0.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "entries",
                        "type": "integer",
                        "description": "The maximum number of entries to return. Must be a number >= 0.",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HistoryEntry"
                            }
                        },
                        "headers": {
                            "history_size": {
                                "type": "integer",
                                "description": "The total number of available entries."
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid params used.",
                        "schema": {
                            "type": "string",
                            "description": "error message"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Endpoint": {
            "description": "Represents an endpoint for workflow operations.",
            "properties": {
                "endpointID": {
                    "type": "integer",
                    "description": "the unique ID of this endpoint"
                },
                "operationName": {
                    "type": "string"
                },
                "qualifier": {
                    "type": "string"
                },
                "endpointURL": {
                    "type": "string",
                    "description": "A valid url."
                },
                "situations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HandledSituation"
                    }
                }
            }
        },
        "Rule": {
            "description": "A rule describes a situation and a set of actions that are executed when the situation occurs.",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "situationName": {
                    "type": "string"
                },
                "objectName": {
                    "type": "string"
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Action"
                    }
                }
            }
        },
        "Action": {
            "description": "An action describes some kind of operation. An action is always associated with a `Rule` and is executed when the situation described by the rule occurs.",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "pluginID": {
                    "type": "string"
                },
                "executionTime": {
                    "type": "string",
                    "description": "Specifies the time when an action is executed. There are three choices':' onSituationChange (The action is executed every time the situation changes), onSituationAppear (The action is executed only when the situation appears) and onSituationDisappear (The action is executed only when the situation disappears)"
                },
                "address": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "params": {
                    "type": "object",
                    "description": "Number and description of param depends on the used Plugin. View Plugin Documentation! For example if plugin has parameter example, use `example`':' `value`."
                }
            }
        },
        "Situation": {
            "description": "A situation is described by the combination of a situation name and an object name.",
            "properties": {
                "situationName": {
                    "type": "string"
                },
                "objectName": {
                    "type": "string"
                }
            }
        },
        "HandledSituation": {
            "description": "A HandledSituation is a situation that is handled by an endpoint. A handled situation posses all attributes of an Situation (name and object). Furthermore a HandledSituation states wheter the situation must hold or not. A HandledSituation can also optional, meaning that the endpoint can be used even if the situation holds (or not). It can be stated that a rollback action has to be initiated by the endpoint if the Handled Situation changes.",
            "properties": {
                "situationName": {
                    "type": "string"
                },
                "objectName": {
                    "type": "string"
                },
                "situationHolds": {
                    "type": "string",
                    "description": "boolean value. Use 'true' or 'false'"
                },
                "optional": {
                    "type": "string",
                    "description": "boolean value. Use 'true' or 'false'"
                },
                "rollbackOnChange": {
                    "type": "string",
                    "description": "boolean value. Use 'true' or 'false'"
                }
            }
        },
        "Plugin": {
            "description": "Represents all information about a plugin.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the plugin. The id is chosen by the plugin developer. The id should be of the form \"com.example.MyPlugin"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the plugin. Nicely readable but not unique."
                },
                "noOfRequiredParams": {
                    "type": "integer",
                    "description": "The number of parameters needed by this plugin."
                },
                "paramDescriptions": {
                    "type": "array",
                    "description": "The description of the parameters required by this plugin.",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Answer": {
            "description": "Represents a successful answer for an operation that does not have another result.",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "A message that describes the result"
                },
                "answerCode": {
                    "type": "string",
                    "description": "Further specifies the result. Often contains the id of the object the operation refered to."
                }
            }
        },
        "HistoryEntry": {
            "description": "An entry in the history.",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "the id of the entry"
                },
                "timestamp": {
                    "type": "string",
                    "description": "date of the entry"
                },
                "situation": {
                    "type": "string",
                    "description": "one or more situations that applied"
                },
                "typeOfAction": {
                    "type": "string",
                    "description": "A description of the thing that happened"
                },
                "recipient": {
                    "type": "string",
                    "description": "The recipient when a message was sent."
                },
                "payload": {
                    "type": "string",
                    "description": "The payload that was sent to the recipient"
                },
                "misc": {
                    "type": "string",
                    "description": "Miscellaneous text to describe the thing that happened"
                }
            }
        }
    },
    "parameters": {
        "EndpointPath": {
            "name": "endpointId",
            "in": "path",
            "description": "the id of the Endpoint",
            "type": "integer",
            "required": true
        },
        "SituationPath": {
            "name": "situationId",
            "in": "path",
            "description": "the id of the situation",
            "type": "integer",
            "required": true
        },
        "RulePath": {
            "name": "ruleId",
            "in": "path",
            "description": "the id of the rule",
            "type": "integer",
            "required": true
        },
        "ActionPath": {
            "name": "actionId",
            "in": "path",
            "description": "the id of the action",
            "type": "integer",
            "required": true
        },
        "PluginPath": {
            "in": "path",
            "name": "pluginId",
            "description": "The id of a plugin, e.g. com.example.myPlugin",
            "type": "string",
            "required": true
        }
    }
}